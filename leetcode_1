/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/

/*
* Problem: Leetcode 1
* @auth : dakshesh
*/


import java.util.*; 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Hashtable<Integer,Integer> h = new Hashtable<Integer,Integer>();
        for(int i=0;i<nums.length;i++) {
            int complement = target - nums[i];
            if(h.containsKey(complement)) {
               return new int[] {h.get(complement),i}; 
            }
            h.put(nums[i],i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
    
}
